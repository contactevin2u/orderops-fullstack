name: Android Release Build

on:
  push:
    branches:
      - main
    paths:
      - 'driver-app/**'
      - '.github/workflows/android-release.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Auto-increment version
      run: |
        cd driver-app
        # Get current version code and name
        CURRENT_VERSION_CODE=$(grep "versionCode = " app/build.gradle.kts | sed 's/.*versionCode = \([0-9]*\).*/\1/')
        CURRENT_VERSION_NAME=$(grep "versionName = " app/build.gradle.kts | sed 's/.*versionName = "\([^"]*\)".*/\1/')
        
        # Increment version code
        NEW_VERSION_CODE=$((CURRENT_VERSION_CODE + 1))
        
        # Increment patch version (assuming format x.y.z)
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION_NAME"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION_NAME="$MAJOR.$MINOR.$NEW_PATCH"
        
        echo "Current version: $CURRENT_VERSION_CODE ($CURRENT_VERSION_NAME)"
        echo "New version: $NEW_VERSION_CODE ($NEW_VERSION_NAME)"
        
        # Update build.gradle.kts
        sed -i "s/versionCode = $CURRENT_VERSION_CODE/versionCode = $NEW_VERSION_CODE/" app/build.gradle.kts
        sed -i "s/versionName = \"$CURRENT_VERSION_NAME\"/versionName = \"$NEW_VERSION_NAME\"/" app/build.gradle.kts
        
        # Set environment variables for later steps
        echo "VERSION_CODE=$NEW_VERSION_CODE" >> $GITHUB_ENV
        echo "VERSION_NAME=$NEW_VERSION_NAME" >> $GITHUB_ENV
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Decode Keystore
      run: |
        echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > driver-app/keystore.jks
    
    - name: Create local.properties
      run: |
        echo "API_BASE=${{ secrets.API_BASE }}" > driver-app/local.properties
        echo "DEBUG: API_BASE secret length: ${#API_BASE}"
        echo "DEBUG: Created local.properties:"
        cat driver-app/local.properties
      env:
        API_BASE: ${{ secrets.API_BASE }}
    
    - name: Create google-services.json
      run: |
        echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > driver-app/app/google-services.json
    
    - name: Fix Gradle Wrapper
      run: |
        rm -f driver-app/gradle/wrapper/gradle-wrapper.jar
        curl -L -o driver-app/gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.9.0/gradle/wrapper/gradle-wrapper.jar
        chmod +x driver-app/gradlew
    
    - name: Build Release AAB
      run: |
        cd driver-app
        echo "=== PRE-BUILD VERIFICATION ==="
        echo "API_BASE from local.properties:"
        grep API_BASE local.properties || echo "API_BASE not found in local.properties"
        echo "API_BASE from environment: $API_BASE"
        echo "Keystore exists: $(test -f keystore.jks && echo 'YES' || echo 'NO')"
        echo "Google services exists: $(test -f app/google-services.json && echo 'YES' || echo 'NO')"
        echo "=== STARTING AAB BUILD ==="
        ./gradlew bundleRelease --stacktrace --info
        echo "=== AAB BUILD COMPLETE ==="
        echo "AAB file size: $(ls -lh app/build/outputs/bundle/release/app-release.aab)"
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        API_BASE: ${{ secrets.API_BASE }}
    
    - name: Upload Release AAB
      uses: actions/upload-artifact@v4
      with:
        name: release-aab
        path: driver-app/app/build/outputs/bundle/release/app-release.aab
    
    - name: Upload Release APK (for testing)
      run: |
        cd driver-app
        ./gradlew assembleRelease
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        API_BASE: ${{ secrets.API_BASE }}
    
    - name: Upload Release APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-apk
        path: driver-app/app/build/outputs/apk/release/app-release.apk
    
    - name: Distribute to Firebase App Distribution
      run: |
        cd driver-app
        ./gradlew appDistributionUploadRelease
      env:
        FIREBASE_APP_DISTRIBUTION_TOKEN: ${{ secrets.FIREBASE_APP_DISTRIBUTION_TOKEN }}
    
    - name: Commit version update
      run: |
        cd driver-app
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add app/build.gradle.kts
        git commit -m "Auto-increment version to $VERSION_NAME ($VERSION_CODE) [skip ci]" || exit 0
        git push
    
    - name: Create release tag
      run: |
        git tag "v$VERSION_NAME"
        git push origin "v$VERSION_NAME"
    
    - name: Clean up sensitive files
      if: always()
      run: |
        rm -f driver-app/keystore.jks
        rm -f driver-app/app/google-services.json