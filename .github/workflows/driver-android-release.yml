name: Build Driver Android (Release APK)

on:
  workflow_dispatch:
  push:
    paths:
      - "driver-app/**"
      - ".github/workflows/driver-android-release.yml"

permissions:
  contents: write  # allow lockfile auto-commit

jobs:
  build-android-release:
    runs-on: ubuntu-latest
    env:
      API_BASE: https://orderops-api-v1.onrender.com
      EXPO_NO_TELEMETRY: 1
      NODE_ENV: production
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (no cache)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Write google-services.json
        working-directory: driver-app
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          test -n "$GOOGLE_SERVICES_JSON" || { echo "Missing GOOGLE_SERVICES_JSON secret"; exit 1; }
          printf '%s' "$GOOGLE_SERVICES_JSON" > google-services.json
          ls -l google-services.json

      - name: Install JS deps (self-healing)
        working-directory: driver-app
        run: |
          set -e
          echo "Attempting npm ci..."
          npm ci || (echo "npm ci mismatch; falling back to npm install" && npm install --no-audit --no-fund)

      - name: Commit updated lockfile (if changed)
        working-directory: driver-app
        run: |
          if ! git diff --quiet package-lock.json; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add package-lock.json
            git commit -m "chore(driver-app): update lockfile for CI [skip ci]"
            git push || echo "Push failed (protected branch?). Continuing build."
          else
            echo "No lockfile changes."
          fi

      - name: Print RN/Expo versions
        working-directory: driver-app
        run: |
          echo "expo pkg:" $(node -p "require('./node_modules/expo/package.json').version")
          echo "react-native pkg:" $(node -p "require('./node_modules/react-native/package.json').version")
          npx --yes expo@^52.0.0 --version

      - name: Ensure expo-splash-screen installed
        working-directory: driver-app
        run: npx --yes expo@^52.0.0 install expo-splash-screen

      - name: Prebuild native Android project (CLEAN + LOG)
        working-directory: driver-app
        run: |
          set -o pipefail
          npx --yes expo@^52.0.0 prebuild --platform android --clean 2>&1 | tee prebuild.log

      - name: Upload prebuild log (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-log
          path: driver-app/prebuild.log
          if-no-files-found: ignore

      - name: Ensure splash color exists
        working-directory: driver-app
        run: |
          mkdir -p android/app/src/main/res/values
          FILE="android/app/src/main/res/values/colors.xml"
          if [ ! -f "$FILE" ] || ! grep -q 'splashscreen_background' "$FILE"; then
            printf '%s\n' '<?xml version="1.0" encoding="utf-8"?>' '<resources>' '  <color name="splashscreen_background">#FFFFFF</color>' '</resources>' > "$FILE"
            echo "Created $FILE with splashscreen_background"
          else
            echo "splashscreen_background already present"
          fi

      - name: Ensure Metro config exists
        working-directory: driver-app
        run: |
          if [ ! -f metro.config.js ]; then
            printf "const { getDefaultConfig } = require('expo/metro-config');\nmodule.exports = getDefaultConfig(__dirname);\n" > metro.config.js
            echo "Created metro.config.js"
          else
            echo "metro.config.js already present"
          fi

      - name: Create JS bundle for Release (offline)
        working-directory: driver-app
        run: |
          mkdir -p android/app/src/main/assets
          ENTRY="index.js"; [ -f "$ENTRY" ] || ENTRY="App.tsx"
          npx react-native bundle \
            --platform android \
            --dev false \
            --config metro.config.js \
            --entry-file "$ENTRY" \
            --bundle-output android/app/src/main/assets/index.android.bundle \
            --assets-dest android/app/src/main/res
          test -f android/app/src/main/assets/index.android.bundle || (echo "::error::Bundle not created"; exit 1)
          echo "Bundled JS from $ENTRY"

      - name: Ensure gradlew exists
        id: gradle_check
        working-directory: driver-app/android
        run: |
          if [ -f ./gradlew ]; then
            chmod +x ./gradlew
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "::error::gradlew missing (prebuild likely failed). Check the prebuild-log artifact."
            echo "found=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Build release APK
        if: steps.gradle_check.outputs.found == 'true'
        working-directory: driver-app/android
        run: ./gradlew assembleRelease

      - name: Upload APK artifact
        if: steps.gradle_check.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: driver-app-release-apk
          path: driver-app/android/app/build/outputs/apk/release/app-release.apk
          if-no-files-found: error

      - name: Install Firebase CLI
        if: steps.gradle_check.outputs.found == 'true'
        run: npm install -g firebase-tools

      - name: Write Firebase service account
        if: steps.gradle_check.outputs.found == 'true'
        run: echo "$FIREBASE_SERVICE_ACCOUNT_JSON" > firebase-service-account.json
        env:
          FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}

      - name: Distribute to Firebase App Distribution
        if: steps.gradle_check.outputs.found == 'true'
        run: |
          firebase appdistribution:distribute driver-app/android/app/build/outputs/apk/release/app-release.apk \
            --app "${{ secrets.FIREBASE_ANDROID_APP_ID }}" \
            --groups "$FIREBASE_GROUPS"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/firebase-service-account.json
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_GROUPS: ${{ secrets.FIREBASE_GROUPS }}
