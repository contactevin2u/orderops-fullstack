name: Build Driver Android (Debug)

on:
  workflow_dispatch:
  push:
    paths:
      - "driver-app/**"
      - ".github/workflows/driver-android-debug.yml"

jobs:
  build-android-debug:
    runs-on: ubuntu-latest

    env:
      API_BASE: https://orderops-api-v1.onrender.com
      EXPO_NO_TELEMETRY: 1
      EXPO_DEBUG: 1
      NODE_ENV: production
      CI: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (no cache)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # If you don't commit driver-app/google-services.json, use a secret instead:
      # - name: Write google-services.json from secret
      #   run: |
      #     mkdir -p driver-app
      #     echo "$GOOGLE_SERVICES_JSON" > driver-app/google-services.json
      #   env:
      #     GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}

      - name: Sanity check (android.package vs google-services.json)
        run: |
          node -e "const fs=require('fs');\
          const p='driver-app/google-services.json';\
          if(!fs.existsSync(p)){console.error('Missing '+p+' â€” commit it or provide GOOGLE_SERVICES_JSON secret.');process.exit(1)}\
          const gs=JSON.parse(fs.readFileSync(p,'utf8'));\
          const pkg=(gs.client||[]).find(c=>c.client_info&&c.client_info.android_client_info)?.client_info.android_client_info.package_name;\
          const conf=fs.readFileSync('driver-app/app.config.ts','utf8');\
          const m=/android:\\s*\\{[\\s\\S]*?package:\\s*\"([^\"]+)\"/m.exec(conf);\
          if(!pkg){console.error('google-services.json: package_name not found');process.exit(1)}\
          if(!m){console.error('app.config.ts: android.package not found');process.exit(1)}\
          if(pkg!==m[1]){console.error('PACKAGE MISMATCH\\n  google-services.json = '+pkg+'\\n  app.config.ts        = '+m[1]);process.exit(1)}\
          console.log('Package OK:', pkg);"

      - name: Install JS deps (lockfile-safe)
        working-directory: driver-app
        run: |
          if [ ! -f package-lock.json ]; then
            npm i --package-lock-only
          fi
          npm ci

      - name: Ensure expo-splash-screen installed
        working-directory: driver-app
        run: npx --yes expo@^51.0.0 install expo-splash-screen

      - name: Check Expo CLI version
        working-directory: driver-app
        run: npx --yes expo@^51.0.0 --version

      - name: Prebuild native Android project (CLEAN + LOG)
        working-directory: driver-app
        run: |
          set -o pipefail
          npx --yes expo@^51.0.0 prebuild --platform android --non-interactive --clean 2>&1 | tee prebuild.log

      - name: Upload prebuild log (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-log
          path: driver-app/prebuild.log
          if-no-files-found: ignore

      # Fallback: guarantee splash color exists so AAPT can't fail
      - name: Ensure splash color exists
        working-directory: driver-app
        run: |
          mkdir -p android/app/src/main/res/values
          FILE="android/app/src/main/res/values/colors.xml"
          if [ ! -f "$FILE" ] || ! grep -q 'splashscreen_background' "$FILE"; then
            printf '%s\n' '<?xml version="1.0" encoding="utf-8"?>' '<resources>' '  <color name="splashscreen_background">#FFFFFF</color>' '</resources>' > "$FILE"
            echo "Created $FILE with splashscreen_background"
          else
            echo "splashscreen_background already present"
          fi

      - name: Ensure google-services.json copied to android/app
        working-directory: driver-app
        run: |
          if [ ! -f android/app/google-services.json ]; then
            cp google-services.json android/app/google-services.json
            echo "Copied google-services.json to android/app/"
          else
            echo "google-services.json already in android/app/"
          fi

      - name: Show generated Android identifiers
        working-directory: driver-app
        run: |
          echo "== AndroidManifest package =="
          if [ -f android/app/src/main/AndroidManifest.xml ]; then grep -m1 'package=' android/app/src/main/AndroidManifest.xml || true; else echo "AndroidManifest missing"; fi
          echo "== app/build.gradle applicationId =="
          if [ -f android/app/build.gradle ]; then grep -m1 'applicationId' android/app/build.gradle || true; else echo "app/build.gradle missing"; fi
          echo "== google-services.json in android/app =="
          ls -l android/app/google-services.json || echo "android/app/google-services.json missing"

      - name: Ensure gradlew exists
        id: gradle_check
        working-directory: driver-app/android
        run: |
          if [ -f ./gradlew ]; then
            chmod +x ./gradlew
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "::error::gradlew missing (prebuild likely failed). Check the prebuild-log artifact."
            echo "found=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Build debug APK
        if: steps.gradle_check.outputs.found == 'true'
        working-directory: driver-app/android
        run: ./gradlew assembleDebug

      - name: Upload APK artifact
        if: steps.gradle_check.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: driver-app-debug-apk
          path: driver-app/android/app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: error

      # Diagnostics on failure
      - name: Upload driver-app tree (on failure)
        if: failure()
        run: |
          (cd driver-app && ls -R) > driver-app-tree.txt || true

      - name: Attach driver-app tree (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: driver-app-tree
          path: driver-app-tree.txt
          if-no-files-found: ignore
